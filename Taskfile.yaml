---
version: "3"

vars:
  REPLSET: postgres mongodb_replset init_mongodb_replset
  DB: ""
  TEST: ""
  PARALLEL: 0

tasks:
  init-tools:
    dir: tools
    cmds:
      - go mod tidy
      - go mod verify
      - go generate -x

  init:
    desc: "Install development tools"
    deps: [init-tools]
    cmds:
      - go mod tidy
      - go mod verify

  fmt:
    desc: "Format code"
    cmds:
      - bin/gofumpt -w ./cmd/ ./internal/

  env-up:
    desc: "Start environment"
    deps: [env-up-detach]
    cmds:
      - docker compose logs --follow

  env-up-detach:
    desc: "Start dependencies in docker"
    cmds:
      # use -t instead of --timeout / --wait-timeout to be compatible with all versions:
      # https://github.com/docker/compose/issues/10269#issuecomment-1495205234
      - >
        docker compose up --always-recreate-deps --force-recreate --remove-orphans --renew-anon-volumes -t 0 --detach
        --build {{.DB}}
    preconditions:
      - sh: "test {{.DB}}"
        msg: "Please set DB variable to one of `ferretdb`, `mongodb`"

  env-pull:
    cmds:
      - docker compose build --pull

  env-up-repl:
    desc: "Start a minimal environment for testing a single-node replica set"
    cmds:
      # use -t instead of --timeout / --wait-timeout to be compatible with all versions:
      # https://github.com/docker/compose/issues/10269#issuecomment-1495205234
      - >
        docker compose up --remove-orphans --renew-anon-volumes -t 0 --detach
        --build {{.REPLSET}}
      - task: env-logs

  env-logs:
    cmds:
      - docker compose ps --all
      - docker compose logs --follow

  env-logs-collect:
    cmds:
      - docker compose ps --all
      - docker compose logs

  env-down:
    desc: "Stop environment"
    cmds:
      - docker compose down --remove-orphans --volumes

  dance:
    desc: "Run all integration tests"
    dir: tests
    cmds:
      - go run ../cmd/dance -db={{.DB}} -p={{.PARALLEL}} {{.TEST}}
    preconditions:
      - sh: "test {{.DB}}"
        msg: "Please set DB variable to one of `ferretdb`, `mongodb`"

  lint:
    desc: "Run linters"
    cmds:
      - >
        bin/golangci-lint run --config=.golangci.yml
        ./cmd/... ./internal/... ./tests/mongo-tools/...
      - >
        bin/golangci-lint run --config=.golangci-new.yml
        ./cmd/... ./internal/... ./tests/mongo-tools/...
      - >
        bin/go-consistent -pedantic
        ./cmd/... ./internal/... ./tests/mongo-tools/...

  psql:
    desc: "Run psql"
    cmds:
      - docker compose exec postgres psql -U postgres -d ferretdb

  mongo:
    desc: "Run legacy MongoDB shell (`mongo`) with test script"
    cmds:
      - >
        docker compose run --rm mongo
        'mongodb://host.docker.internal:27017/'
        {{.CLI_ARGS}}

  mongosh:
    desc: "Run mongo shell"
    cmds:
      - >
        docker compose run --rm mongosh mongosh mongodb://host.docker.internal:27017/
        --verbose --eval 'disableTelemetry()' --shell

  # see https://github.com/DavidAnson/markdownlint-cli2#command-line for the reason we use double-quotes
  docs-fmt:
    desc: "Format and lint documentation"
    cmds:
      - docker compose run --rm textlint --fix --rule one-sentence-per-line "**/*.md" ".github/**/*.md"
      - docker compose run --rm markdownlint "**/*.md" "#dumps" "#tests"
