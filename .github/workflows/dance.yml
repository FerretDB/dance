---
name: Dance
on:
  pull_request:
    types:
      - unlabeled # if GitHub Actions stuck, add and remove "not ready" label to force rebuild
      - opened
      - reopened
      - synchronize
  push:
    branches:
      - main
  schedule:
    - cron: "12 3 * * *" # after FerretDB's Docker workflow

env:
  GOPATH: /home/runner/go
  GOCACHE: /home/runner/go/cache
  GOLANGCI_LINT_CACHE: /home/runner/go/cache/lint
  GOMODCACHE: /home/runner/go/mod
  GOPROXY: https://proxy.golang.org
  GOTOOLCHAIN: local

jobs:
  dance:
    name: dance

    # https://www.ubicloud.com/docs/github-actions-integration/price-performance#usage-pricing
    # https://docs.github.com/en/billing/managing-billing-for-github-actions/about-billing-for-github-actions#per-minute-rates
    runs-on: ubicloud-standard-4

    timeout-minutes: 45

    # Do not run this job in parallel for any PR change or branch push
    # to save some resources.
    concurrency:
      group: ${{ github.workflow }}-dance-${{ matrix.db }}-${{ matrix.test }}-${{ github.head_ref || github.ref_name }}
      cancel-in-progress: true

    if: github.event_name != 'pull_request' || !contains(github.event.pull_request.labels.*.name, 'not ready')

    strategy:
      fail-fast: false
      matrix:
        db:
          - postgresql
          - sqlite
          - mongodb
        test:
          # temporarily disabling to avoid CI noise
          # - dbaas_core-0
          # - dbaas_core-1
          # - dbaas_core-2
          # - dbaas_core-3
          # - diff
          # - meteor-doc-fetcher
          # - meteor-oplog-cursor-supported
          # - meteor-oplog-entry-skipping
          # - meteor-oplog-x-implicit-collection-creation
          # - mongo
          # - mongo-go-driver
          # - restheart
          # - restheart-auth
          # - ycsb-workloada
          # - ycsb-workloadc

          # TODO https://github.com/FerretDB/dance/issues/892
          # - mongo-tools

          - dotnet
          - dotnet-plain
          - dotnet-scram

          - java
          - java-plain
          - java-scram

          - python
          - python-plain
          - python-scram

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Go
        uses: FerretDB/github-actions/setup-go@main
        with:
          cache-key: dance

      - name: Install Task
        run: go generate -x
        working-directory: tools

      - name: Start environment
        run: bin/task env-up-detach DB=${{ matrix.db }}
        env:
          FERRETDB_IMAGE: ghcr.io/ferretdb/ferretdb-dev:main

      - name: Run init
        run: bin/task init

      - name: Dance!
        run: bin/task dance DB=${{ matrix.db }} TEST=${{ matrix.test }} PARALLEL=10

      - name: Collect logs
        if: failure()
        run: |
          bin/task env-logs-collect > /tmp/compose-logs.txt

      - name: Compress logs before upload
        if: failure()
        run: zip -q -9 compose-logs.zip /tmp/compose-logs.txt

      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: compose-logs-${{ matrix.db }}-${{ matrix.test }}
          path: compose-logs.zip
          retention-days: 3

      # ignore `go mod tidy` being applied to the Go driver, etc
      - name: Check dirty
        run: |
          git status --ignore-submodules=none
          git diff --ignore-submodules=all --exit-code
